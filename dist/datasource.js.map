{"version":3,"sources":["../src/datasource.js"],"names":["_","GenericDatasource","instanceSettings","$q","backendSrv","templateSrv","type","url","name","q","withCredentials","headers","basicAuth","length","options","query","targets","filter","t","hide","when","data","doRequest","method","then","response","status","message","title","replace","annotation","annotationQuery","range","datasource","enable","iconColor","rangeRaw","result","interpolated","target","mapToTextValue","map","d","i","text","value","isObject","datasourceRequest","scopedVars","refId"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from \"lodash\";\n\nexport class GenericDatasource {\n\n    constructor(instanceSettings, $q, backendSrv, templateSrv) {\n        this.type = instanceSettings.type;\n        this.url = instanceSettings.url;\n        this.name = instanceSettings.name;\n        this.q = $q;\n        this.backendSrv = backendSrv;\n        this.templateSrv = templateSrv;\n        this.withCredentials = instanceSettings.withCredentials;\n        this.headers = {'Content-Type': 'application/json'};\n        if (typeof instanceSettings.basicAuth === 'string' && instanceSettings.basicAuth.length > 0) {\n            this.headers['Authorization'] = instanceSettings.basicAuth;\n        }\n    }\n\n    query(options) {\n        // var query = this.buildQueryParameters(options);\n        var query = options;\n        query.targets = query.targets.filter(t => !t.hide);\n\n        if (query.targets.length <= 0) {\n            return this.q.when({data: []});\n        }\n\n        return this.doRequest({\n            url: this.url + '/query',\n            data: query,\n            method: 'POST'\n        });\n    }\n\n    testDatasource() {\n        return this.doRequest({\n            url: this.url + '/',\n            method: 'GET',\n        }).then(response => {\n            if (response.status === 200) {\n                return {status: \"success\", message: \"Data source is working\", title: \"Success\"};\n            }\n        });\n    }\n\n    annotationQuery(options) {\n        var query = this.templateSrv.replace(options.annotation.query, {}, 'glob');\n        var annotationQuery = {\n            range: options.range,\n            annotation: {\n                name: options.annotation.name,\n                datasource: options.annotation.datasource,\n                enable: options.annotation.enable,\n                iconColor: options.annotation.iconColor,\n                query: query\n            },\n            rangeRaw: options.rangeRaw\n        };\n\n        return this.doRequest({\n            url: this.url + '/annotations',\n            method: 'POST',\n            data: annotationQuery\n        }).then(result => {\n            return result.data;\n        });\n    }\n\n    metricFindQuery(query) {\n        var interpolated = {\n            target: this.templateSrv.replace(query, null, 'regex')\n        };\n\n        return this.doRequest({\n            url: this.url + '/search',\n            data: interpolated,\n            method: 'POST',\n        }).then(this.mapToTextValue);\n    }\n\n    mapToTextValue(result) {\n        return _.map(result.data, (d, i) => {\n            if (d && d.text && d.value) {\n                return {text: d.text, value: d.value};\n            } else if (_.isObject(d)) {\n                return {text: d, value: i};\n            }\n            return {text: d, value: d};\n        });\n    }\n\n    doRequest(options) {\n        options.withCredentials = this.withCredentials;\n        options.headers = this.headers;\n\n        return this.backendSrv.datasourceRequest(options);\n    }\n\n    buildQueryParameters(options) {\n        //remove placeholder targets\n        options.targets = _.filter(options.targets, target => {\n            return target.target !== 'select metric';\n        });\n\n        var targets = _.map(options.targets, target => {\n            return {\n                target: this.templateSrv.replace(target.target, options.scopedVars, 'regex'),\n                refId: target.refId,\n                hide: target.hide,\n                type: target.type || 'timeserie'\n            };\n        });\n\n        options.targets = targets;\n\n        return options;\n    }\n}\n"]}
{"version":3,"sources":["../src/datasource.js"],"names":["_","GenericDatasource","instanceSettings","$q","backendSrv","templateSrv","type","url","name","q","modifyTemplateVariableIdentifier","withCredentials","headers","basicAuth","length","parseComplex","jsonData","parseQueries","queryControls","options","targets","filter","t","hide","when","data","query","JSON","parse","stringify","i","replace","user","contextSrv","userId","id","org","orgName","orgId","panelName","doRequest","method","then","res","response","queryControl","getComplexParts","status","message","title","annotation","annotationQuery","range","datasource","enable","iconColor","rangeRaw","result","interpolated","target","mapToTextValue","map","d","text","value","isObject","datasourceRequest","scopedVars","refId","newIdentifier","regStr","regex","source","RegExp"],"mappings":";;;;;;;;;;;;;;;AAAOA,a;;;;;;;;;;;;;;;;;;;;;yCAEMC,iB;AAET,2CAAYC,gBAAZ,EAA8BC,EAA9B,EAAkCC,UAAlC,EAA8CC,WAA9C,EAA2D;AAAA;;AACvD,yBAAKC,IAAL,GAAYJ,iBAAiBI,IAA7B;AACA,yBAAKC,GAAL,GAAWL,iBAAiBK,GAA5B;AACA,yBAAKC,IAAL,GAAYN,iBAAiBM,IAA7B;AACA,yBAAKC,CAAL,GAASN,EAAT;AACA,yBAAKC,UAAL,GAAkBA,UAAlB;AACA,yBAAKC,WAAL,GAAmBJ,kBAAkBS,gCAAlB,CAAmDL,WAAnD,EAAgE,GAAhE,CAAnB;AACA,yBAAKM,eAAL,GAAuBT,iBAAiBS,eAAxC;AACA,yBAAKC,OAAL,GAAe,EAAC,gBAAgB,kBAAjB,EAAf;AACA,wBAAI,OAAOV,iBAAiBW,SAAxB,KAAsC,QAAtC,IAAkDX,iBAAiBW,SAAjB,CAA2BC,MAA3B,GAAoC,CAA1F,EAA6F;AACzF,6BAAKF,OAAL,CAAa,eAAb,IAAgCV,iBAAiBW,SAAjD;AACH;;AAED,yBAAKE,YAAL,GAAoBb,iBAAiBc,QAAjB,CAA0BC,YAA9C;;AAEA,yBAAKC,aAAL,GAAqB,EAArB;AACH;;;;0CAWKC,O,EAAS;AAAA;;AACXA,gCAAQC,OAAR,GAAkBD,QAAQC,OAAR,CAAgBC,MAAhB,CAAuB;AAAA,mCAAK,CAACC,EAAEC,IAAR;AAAA,yBAAvB,CAAlB;;AAEA,4BAAIJ,QAAQC,OAAR,CAAgBN,MAAhB,IAA0B,CAA9B,EAAiC;AAC7B,mCAAO,KAAKL,CAAL,CAAOe,IAAP,CAAY,EAACC,MAAM,EAAP,EAAZ,CAAP;AACH;AACD;AACA,4BAAIC,QAAQC,KAAKC,KAAL,CAAWD,KAAKE,SAAL,CAAeV,OAAf,CAAX,CAAZ;;AAEA,6BAAI,IAAIW,IAAI,CAAZ,EAAeA,IAAIJ,MAAMN,OAAN,CAAcN,MAAjC,EAAyCgB,GAAzC,EAA8C;AAC1C,gCAAIT,SAASK,MAAMN,OAAN,CAAcU,CAAd,EAAiBT,MAA9B;AACAK,kCAAMN,OAAN,CAAcU,CAAd,EAAiBT,MAAjB,GAA0B,KAAKhB,WAAL,CAAiB0B,OAAjB,CAAyBV,MAAzB,EAAiC,IAAjC,EAAuC,OAAvC,CAA1B;AACH;;AAEDK,8BAAMX,YAAN,GAAqB,KAAKA,YAA1B;;AAEAW,8BAAMM,IAAN,GAAa,KAAK5B,UAAL,CAAgB6B,UAAhB,CAA2BD,IAA3B,CAAgCxB,IAA7C;AACAkB,8BAAMQ,MAAN,GAAe,KAAK9B,UAAL,CAAgB6B,UAAhB,CAA2BD,IAA3B,CAAgCG,EAA/C;AACAT,8BAAMU,GAAN,GAAY,KAAKhC,UAAL,CAAgB6B,UAAhB,CAA2BD,IAA3B,CAAgCK,OAA5C;AACAX,8BAAMY,KAAN,GAAc,KAAKlC,UAAL,CAAgB6B,UAAhB,CAA2BD,IAA3B,CAAgCM,KAA9C;AACA;AACAZ,8BAAMa,SAAN,GAAkB,KAAKA,SAAvB;;AAEA,+BAAO,KAAKC,SAAL,CAAe;AAClBjC,iCAAK,KAAKA,GAAL,GAAW,QADE;AAElBkB,kCAAMC,KAFY;AAGlBe,oCAAQ;AAHU,yBAAf,EAIJC,IAJI,CAIC,UAACC,GAAD,EAAS;AACb;AACA,kCAAKC,QAAL,GAAgBD,GAAhB;AAFa;AAAA;AAAA;;AAAA;AAGb,qDAAwB,MAAKzB,aAA7B,8HAA4C;AAAA,wCAApC2B,YAAoC;;AACxCA,iDAAaC,eAAb;AACH;AALY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAMb,mCAAOH,GAAP;AACH,yBAXM,CAAP;AAYH;;;qDAEgB;AACb,+BAAO,KAAKH,SAAL,CAAe;AAClBjC,iCAAK,KAAKA,GAAL,GAAW,GADE;AAElBkC,oCAAQ;AAFU,yBAAf,EAGJC,IAHI,CAGC,oBAAY;AAChB,gCAAIE,SAASG,MAAT,KAAoB,GAAxB,EAA6B;AACzB,uCAAO,EAACA,QAAQ,SAAT,EAAoBC,SAAS,wBAA7B,EAAuDC,OAAO,SAA9D,EAAP;AACH;AACJ,yBAPM,CAAP;AAQH;;;oDAEe9B,O,EAAS;AACrB,4BAAIO,QAAQ,KAAKrB,WAAL,CAAiB0B,OAAjB,CAAyBZ,QAAQ+B,UAAR,CAAmBxB,KAA5C,EAAmD,EAAnD,EAAuD,MAAvD,CAAZ;AACA,4BAAIyB,kBAAkB;AAClBC,mCAAOjC,QAAQiC,KADG;AAElBF,wCAAY;AACR1C,sCAAMW,QAAQ+B,UAAR,CAAmB1C,IADjB;AAER6C,4CAAYlC,QAAQ+B,UAAR,CAAmBG,UAFvB;AAGRC,wCAAQnC,QAAQ+B,UAAR,CAAmBI,MAHnB;AAIRC,2CAAWpC,QAAQ+B,UAAR,CAAmBK,SAJtB;AAKR7B,uCAAOA;AALC,6BAFM;AASlB8B,sCAAUrC,QAAQqC;AATA,yBAAtB;;AAYA,+BAAO,KAAKhB,SAAL,CAAe;AAClBjC,iCAAK,KAAKA,GAAL,GAAW,cADE;AAElBkC,oCAAQ,MAFU;AAGlBhB,kCAAM0B;AAHY,yBAAf,EAIJT,IAJI,CAIC,kBAAU;AACd,mCAAOe,OAAOhC,IAAd;AACH,yBANM,CAAP;AAOH;;;oDAEeC,K,EAAO;AACnB,4BAAIgC,eAAe;AACfC,oCAAQ,KAAKtD,WAAL,CAAiB0B,OAAjB,CAAyBL,KAAzB,EAAgC,IAAhC,EAAsC,OAAtC;AADO,yBAAnB;;AAIA,+BAAO,KAAKc,SAAL,CAAe;AAClBjC,iCAAK,KAAKA,GAAL,GAAW,SADE;AAElBkB,kCAAMiC,YAFY;AAGlBjB,oCAAQ;AAHU,yBAAf,EAIJC,IAJI,CAIC,KAAKkB,cAJN,CAAP;AAKH;;;mDAEcH,M,EAAQ;AACnB,+BAAOzD,EAAE6D,GAAF,CAAMJ,OAAOhC,IAAb,EAAmB,UAACqC,CAAD,EAAIhC,CAAJ,EAAU;AAChC,gCAAIgC,KAAKA,EAAEC,IAAP,IAAeD,EAAEE,KAArB,EAA4B;AACxB,uCAAO,EAACD,MAAMD,EAAEC,IAAT,EAAeC,OAAOF,EAAEE,KAAxB,EAAP;AACH,6BAFD,MAEO,IAAIhE,EAAEiE,QAAF,CAAWH,CAAX,CAAJ,EAAmB;AACtB,uCAAO,EAACC,MAAMD,CAAP,EAAUE,OAAOlC,CAAjB,EAAP;AACH;AACD,mCAAO,EAACiC,MAAMD,CAAP,EAAUE,OAAOF,CAAjB,EAAP;AACH,yBAPM,CAAP;AAQH;;;8CAES3C,O,EAAS;AACfA,gCAAQR,eAAR,GAA0B,KAAKA,eAA/B;AACAQ,gCAAQP,OAAR,GAAkB,KAAKA,OAAvB;;AAEA,6BAAKO,OAAL,GAAeA,OAAf;;AAEA,+BAAO,KAAKf,UAAL,CAAgB8D,iBAAhB,CAAkC/C,OAAlC,CAAP;AACH;;;yDAEoBA,O,EAAS;AAAA;;AAC1B;AACAA,gCAAQC,OAAR,GAAkBpB,EAAEqB,MAAF,CAASF,QAAQC,OAAjB,EAA0B,kBAAU;AAClD,mCAAOuC,OAAOA,MAAP,KAAkB,eAAzB;AACH,yBAFiB,CAAlB;;AAIA,4BAAIvC,UAAUpB,EAAE6D,GAAF,CAAM1C,QAAQC,OAAd,EAAuB,kBAAU;AAC3C,mCAAO;AACHuC,wCAAQ,OAAKtD,WAAL,CAAiB0B,OAAjB,CAAyB4B,OAAOA,MAAhC,EAAwCxC,QAAQgD,UAAhD,EAA4D,OAA5D,CADL;AAEHC,uCAAOT,OAAOS,KAFX;AAGH7C,sCAAMoC,OAAOpC,IAHV;AAIHjB,sCAAMqD,OAAOrD,IAAP,IAAe;AAJlB,6BAAP;AAMH,yBAPa,CAAd;;AASAa,gCAAQC,OAAR,GAAkBA,OAAlB;;AAEA,+BAAOD,OAAP;AACH;;;qEAlIuCd,W,EAAagE,a,EAAe;AAChE,4BAAIC,SAASjE,YAAYkE,KAAZ,CAAkBC,MAA/B;;AAEA;AACAF,iCAASA,OAAOvC,OAAP,CAAe,OAAf,EAAwBsC,aAAxB,CAAT;AACAhE,oCAAYkE,KAAZ,GAAoB,IAAIE,MAAJ,CAAWH,MAAX,EAAmB,GAAnB,CAApB;AACA,+BAAOjE,WAAP;AACH","file":"datasource.js","sourcesContent":["import _ from \"lodash\";\r\n\r\nexport class GenericDatasource {\r\n\r\n    constructor(instanceSettings, $q, backendSrv, templateSrv) {\r\n        this.type = instanceSettings.type;\r\n        this.url = instanceSettings.url;\r\n        this.name = instanceSettings.name;\r\n        this.q = $q;\r\n        this.backendSrv = backendSrv;\r\n        this.templateSrv = GenericDatasource.modifyTemplateVariableIdentifier(templateSrv, '~');\r\n        this.withCredentials = instanceSettings.withCredentials;\r\n        this.headers = {'Content-Type': 'application/json'};\r\n        if (typeof instanceSettings.basicAuth === 'string' && instanceSettings.basicAuth.length > 0) {\r\n            this.headers['Authorization'] = instanceSettings.basicAuth;\r\n        }\r\n\r\n        this.parseComplex = instanceSettings.jsonData.parseQueries;\r\n\r\n        this.queryControls = [];\r\n    }\r\n\r\n    static modifyTemplateVariableIdentifier(templateSrv, newIdentifier) {\r\n        let regStr = templateSrv.regex.source;\r\n\r\n        //There are 2 occurrences of '\\$'. Remember to escape!\r\n        regStr = regStr.replace(/\\\\\\$/g, newIdentifier);\r\n        templateSrv.regex = new RegExp(regStr, 'g');\r\n        return templateSrv;\r\n    }\r\n\r\n    query(options) {\r\n        options.targets = options.targets.filter(t => !t.hide);\r\n\r\n        if (options.targets.length <= 0) {\r\n            return this.q.when({data: []});\r\n        }\r\n        //Deep copy the object. When template variables are swapped out we don't want to modify the original values\r\n        let query = JSON.parse(JSON.stringify(options));\r\n\r\n        for(let i = 0; i < query.targets.length; i++) {\r\n            let filter = query.targets[i].filter;\r\n            query.targets[i].filter = this.templateSrv.replace(filter, null, 'regex')\r\n        }\r\n\r\n        query.parseComplex = this.parseComplex;\r\n\r\n        query.user = this.backendSrv.contextSrv.user.name;\r\n        query.userId = this.backendSrv.contextSrv.user.id;\r\n        query.org = this.backendSrv.contextSrv.user.orgName;\r\n        query.orgId = this.backendSrv.contextSrv.user.orgId;\r\n        //Set in query ctrl constructor\r\n        query.panelName = this.panelName;\r\n\r\n        return this.doRequest({\r\n            url: this.url + '/query',\r\n            data: query,\r\n            method: 'POST'\r\n        }).then((res) => {\r\n            //Holds on to the response so that it's accessible by the query controls\r\n            this.response = res;\r\n            for(let queryControl of this.queryControls) {\r\n                queryControl.getComplexParts();\r\n            }\r\n            return res;\r\n        } );\r\n    }\r\n\r\n    testDatasource() {\r\n        return this.doRequest({\r\n            url: this.url + '/',\r\n            method: 'GET',\r\n        }).then(response => {\r\n            if (response.status === 200) {\r\n                return {status: \"success\", message: \"Data source is working\", title: \"Success\"};\r\n            }\r\n        });\r\n    }\r\n\r\n    annotationQuery(options) {\r\n        var query = this.templateSrv.replace(options.annotation.query, {}, 'glob');\r\n        var annotationQuery = {\r\n            range: options.range,\r\n            annotation: {\r\n                name: options.annotation.name,\r\n                datasource: options.annotation.datasource,\r\n                enable: options.annotation.enable,\r\n                iconColor: options.annotation.iconColor,\r\n                query: query\r\n            },\r\n            rangeRaw: options.rangeRaw\r\n        };\r\n\r\n        return this.doRequest({\r\n            url: this.url + '/annotations',\r\n            method: 'POST',\r\n            data: annotationQuery\r\n        }).then(result => {\r\n            return result.data;\r\n        });\r\n    }\r\n\r\n    metricFindQuery(query) {\r\n        var interpolated = {\r\n            target: this.templateSrv.replace(query, null, 'regex')\r\n        };\r\n\r\n        return this.doRequest({\r\n            url: this.url + '/search',\r\n            data: interpolated,\r\n            method: 'POST',\r\n        }).then(this.mapToTextValue);\r\n    }\r\n\r\n    mapToTextValue(result) {\r\n        return _.map(result.data, (d, i) => {\r\n            if (d && d.text && d.value) {\r\n                return {text: d.text, value: d.value};\r\n            } else if (_.isObject(d)) {\r\n                return {text: d, value: i};\r\n            }\r\n            return {text: d, value: d};\r\n        });\r\n    }\r\n\r\n    doRequest(options) {\r\n        options.withCredentials = this.withCredentials;\r\n        options.headers = this.headers;\r\n\r\n        this.options = options;\r\n\r\n        return this.backendSrv.datasourceRequest(options);\r\n    }\r\n\r\n    buildQueryParameters(options) {\r\n        //remove placeholder targets\r\n        options.targets = _.filter(options.targets, target => {\r\n            return target.target !== 'select metric';\r\n        });\r\n\r\n        var targets = _.map(options.targets, target => {\r\n            return {\r\n                target: this.templateSrv.replace(target.target, options.scopedVars, 'regex'),\r\n                refId: target.refId,\r\n                hide: target.hide,\r\n                type: target.type || 'timeserie'\r\n            };\r\n        });\r\n\r\n        options.targets = targets;\r\n\r\n        return options;\r\n    }\r\n}\r\n"]}
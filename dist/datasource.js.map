{"version":3,"sources":["../src/datasource.js"],"names":["handleTsdbResponse","response","res","_","forEach","data","results","r","series","push","target","s","name","datapoints","points","queries","meta","refId","tables","t","type","ScalyrDatasource","instanceSettings","$q","backendSrv","templateSrv","timeSrv","datasourceId","id","url","q","templateVarIdentifier","templateVarEscaperChar","modifyTemplateVariableIdentifier","addTemplateVariableEscapeChar","withCredentials","headers","basicAuth","length","parseComplex","jsonData","parseQueries","queryControls","String","prototype","reverse","split","join","filter","replace","RegExp","newFilter","a","b","variable","index","Object","hasOwnProperty","current","value","options","parsedOptions","buildQueryParameters","targets","hide","when","finalOptions","cloneDeep","i","reverseAllVariables","findAndReverse","removeEscapeChar","user","contextSrv","userId","org","orgName","orgId","refIdMap","map","doTsdbRequest","then","sort","indexOf","queryControl","getComplexParts","doMetricQueryRequest","status","message","title","catch","err","query","serverHostsQuery","match","logFilesQuery","serverHost","tsdbRequestData","from","range","valueOf","toString","to","datasourceRequest","method","queryType","scalyrQueryType","subtype","chosenType","scopedVars","graphFunction","intervalType","secondsInterval","showQueryParts","parameters","timeRange","extend","transformSuggestDataFromTable","newIdentifier","regStr","regex","source","escape","identifier","suggestData","rows","text","v"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from \"lodash\";\n\nexport class ScalyrDatasource {\n\n    constructor(instanceSettings, $q, backendSrv, templateSrv, timeSrv) {\n        this.datasourceId = instanceSettings.id;\n        this.type = instanceSettings.type;\n        this.url = instanceSettings.url;\n        this.name = instanceSettings.name;\n        this.q = $q;\n        this.backendSrv = backendSrv;\n        this.templateVarIdentifier = '~';\n        this.templateVarEscaperChar = \"\\\\\";\n        this.templateSrv = ScalyrDatasource.modifyTemplateVariableIdentifier(templateSrv, this.templateVarIdentifier);\n        this.templateSrv = ScalyrDatasource.addTemplateVariableEscapeChar(this.templateSrv, this.templateVarEscaperChar, this.templateVarIdentifier);\n        this.timeSrv = timeSrv;\n        this.withCredentials = instanceSettings.withCredentials;\n        this.headers = {'Content-Type': 'application/json'};\n        if (typeof instanceSettings.basicAuth === 'string' && instanceSettings.basicAuth.length > 0) {\n            this.headers['Authorization'] = instanceSettings.basicAuth;\n        }\n\n        this.parseComplex = instanceSettings.jsonData.parseQueries || false;\n\n        this.queryControls = [];\n\n        //Used for escaping template variables, needed to write regex backwards to take advantage of lookbehinds\n        String.prototype.reverse = function () {\n            return this.split('').reverse().join('');\n        };\n    }\n\n    static modifyTemplateVariableIdentifier(templateSrv, newIdentifier) {\n        let regStr = templateSrv.regex.source;\n\n        //There are 2 occurrences of '\\$'. Remember to escape!\n        regStr = regStr.replace(/\\\\\\$/g, newIdentifier);\n        templateSrv.regex = new RegExp(regStr, 'g');\n        return templateSrv;\n    }\n\n    static addTemplateVariableEscapeChar(templateSrv, escape, identifier) {\n        let regStr = templateSrv.regex.source;\n\n        //We have to write our regex backwards because lookbehinds aren't supported everywhere yet.\n        regStr = regStr.replace(RegExp(identifier + \"\\\\(\\\\\\\\w\\\\+\\\\)\", 'g'), `(\\\\w+)${identifier}(?=[^${\"\\\\\" + escape}]|$)`);\n        templateSrv.regex = new RegExp(regStr, 'g');\n        return templateSrv;\n    }\n\n    removeEscapeChar(filter) {\n        return filter.replace(RegExp(\"\\\\\" + this.templateVarEscaperChar + this.templateVarIdentifier, 'g'), this.templateVarIdentifier);\n    }\n\n    findAndReverse(filter) {\n        let newFilter = filter.reverse();\n        return newFilter.replace(RegExp(`(\\\\w+)(?=${this.templateVarIdentifier}(?!\\\\${this.templateVarEscaperChar}))`, 'g'), function (a, b) {\n            return b.reverse();\n        });\n    }\n\n    reverseAllVariables() {\n        for (let variable in this.templateSrv.index) {\n            // noinspection JSUnfilteredForInLoop\n            if (this.templateSrv.index[variable] instanceof Object\n                && this.templateSrv.index[variable].hasOwnProperty(\"current\")) {\n                // noinspection JSUnfilteredForInLoop\n                this.templateSrv.index[variable].current.value = this.templateSrv.index[variable].current.value.reverse();\n            }\n        }\n    }\n\n    query(options) {\n        const parsedOptions = this.buildQueryParameters(options);\n        parsedOptions.targets = options.targets.filter(t => !t.hide);\n        if (options.targets.length <= 0) {\n            return this.q.when({data: []});\n        }\n        //Deep copy the object. When template variables are swapped out we don't want to modify the original values\n        let finalOptions = _.cloneDeep(parsedOptions);\n\n        for (let i = 0; i < finalOptions.targets.length; i++) {\n            this.reverseAllVariables();\n            let filter = this.findAndReverse(finalOptions.targets[i].filter);\n            finalOptions.targets[i].filter = this.findAndReverse(this.templateSrv.replace(filter, null, 'regex'));\n            finalOptions.targets[i].filter = this.removeEscapeChar(finalOptions.targets[i].filter);\n            this.reverseAllVariables();\n\n            //Run through forwards for square bracket variable syntax\n            finalOptions.targets[i].filter = this.templateSrv.replace(finalOptions.targets[i].filter, null, 'regex');\n\n            //Grafana adds regex escapes to the variables for some reason\n            finalOptions.targets[i].filter = finalOptions.targets[i].filter.replace(/\\\\(.)/g, \"$1\");\n        }\n\n        finalOptions.parseComplex = this.parseComplex;\n\n        finalOptions.user = this.backendSrv.contextSrv.user.name;\n        finalOptions.userId = this.backendSrv.contextSrv.user.id;\n        finalOptions.org = this.backendSrv.contextSrv.user.orgName;\n        finalOptions.orgId = this.backendSrv.contextSrv.user.orgId;\n\n        //This is needed because Grafana messes up the ordering when moving the response from backend to frontend\n        let refIdMap = _.map(options.targets, target => target.refId);\n\n        return this.doTsdbRequest(finalOptions)\n            .then(handleTsdbResponse).then((res) => {\n                res.data.sort((a, b) => {\n                    return refIdMap.indexOf(a.refId) > refIdMap.indexOf(b.refId);\n                });\n                this.response = res;\n                for (let queryControl of this.queryControls) {\n                    queryControl.getComplexParts();\n                }\n                return res;\n            });\n    }\n\n    testDatasource() {\n        return this.doMetricQueryRequest('test_datasource', {}\n        ).then(response => {\n            return this.q.when({status: \"success\", message: \"Data source is working\", title: \"Success\"});\n        }).catch(err => {\n            return {status: \"error\", message: err.message, title: \"Error\"};\n        });\n    }\n\n    metricFindQuery(query) {\n        let serverHostsQuery = query.match(/^server_hosts\\(\\)/);\n        if (serverHostsQuery) {\n            return this.doMetricQueryRequest('server_hosts', {});\n        }\n\n        let logFilesQuery = query.match(/^log_files\\((.+)\\)/);\n        if (logFilesQuery) {\n            let serverHost = logFilesQuery[1];\n            return this.doMetricQueryRequest('named_query_queries', {\n                serverHost: this.templateSrv.replace(serverHost)\n            });\n        }\n\n        return this.q.when([]);\n    }\n\n    /**\n     *\n     * @param options TSDBRequestOptions\n     */\n    doTsdbRequest(options) {\n        const tsdbRequestData = {\n            from: options.range.from.valueOf().toString(),\n            to: options.range.to.valueOf().toString(),\n            queries: options.targets,\n        };\n\n        return this.backendSrv.datasourceRequest({\n            url: '/api/tsdb/query',\n            method: 'POST',\n            data: tsdbRequestData\n        });\n    }\n\n    buildQueryParameters(options) {\n        //remove placeholder targets\n        options.targets = _.filter(options.targets, target => {\n            return target.target !== 'select metric';\n        });\n\n        options.targets = _.map(options.targets, target => {\n            return {\n                datasourceId: this.datasourceId,\n                refId: target.refId,\n                hide: target.hide,\n\n                queryType: 'query',\n                type: target.type,\n                scalyrQueryType: target.type,\n                subtype: target.type || 'timeserie',\n                chosenType: target.chosenType,\n                target: this.templateSrv.replace(target.target, options.scopedVars, 'regex'), //the name of the query\n                filter: target.filter, //the filter sent to scalyr\n                graphFunction: target.graphFunction, //the type of function that is needed on Scalyr's end\n                intervalType: target.intervalType,\n                secondsInterval: target.secondsInterval,\n                showQueryParts: target.showQueryParts\n            };\n        });\n\n        return options;\n    }\n\n    doMetricQueryRequest(subtype, parameters) {\n        let range = this.timeSrv.timeRange();\n        return this.backendSrv.datasourceRequest({\n            url: '/api/tsdb/query',\n            method: 'POST',\n            data: {\n                from: range.from.valueOf().toString(),\n                to: range.to.valueOf().toString(),\n                queries: [\n                    _.extend(\n                        {\n                            refId: 'metricFindQuery',\n                            datasourceId: this.datasourceId,\n                            queryType: 'metricFindQuery',\n                            subtype: subtype,\n                        },\n                        parameters\n                    ),\n                ],\n            }\n        }).then(r => {\n            return ScalyrDatasource.transformSuggestDataFromTable(r.data);\n        });\n    }\n\n    static transformSuggestDataFromTable(suggestData) {\n        return _.map(suggestData.results['metricFindQuery'].tables[0].rows, v => {\n            return {\n                text: v[0],\n                value: v[1],\n            };\n        });\n    }\n}\n\nexport function handleTsdbResponse(response) {\n    const res = [];\n    _.forEach(response.data.results, r => {\n        _.forEach(r.series, s => {\n            res.push({target: s.name, datapoints: s.points, queries: r.meta, refId: r.refId});\n        });\n        _.forEach(r.tables, t => {\n            t.type = 'table';\n            t.refId = r.refId;\n            res.push(t);\n        });\n    });\n\n    response.data = res;\n    return response;\n}\n"]}
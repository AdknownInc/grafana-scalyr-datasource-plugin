{"version":3,"sources":["../src/datasource.js"],"names":["handleTsdbResponse","response","res","_","forEach","data","results","r","series","push","target","s","name","datapoints","points","queries","meta","refId","tables","t","type","GenericDatasource","instanceSettings","$q","backendSrv","templateSrv","datasourceId","id","url","q","templateVarIdentifier","templateVarEscaperChar","modifyTemplateVariableIdentifier","addTemplateVariableEscapeChar","withCredentials","headers","basicAuth","length","parseComplex","jsonData","parseQueries","queryControls","String","prototype","reverse","split","join","filter","replace","RegExp","newFilter","a","b","variable","index","Object","hasOwnProperty","current","value","options","targets","hide","when","query","JSON","parse","stringify","i","reverseAllVariables","findAndReverse","removeEscapeChar","user","contextSrv","userId","org","orgName","orgId","panelName","tsdbRequest","from","range","valueOf","toString","to","backendUse","refIdMap","datasourceRequest","method","then","sort","indexOf","queryControl","getComplexParts","doRequest","status","message","title","annotation","annotationQuery","datasource","enable","iconColor","rangeRaw","result","interpolated","mapToTextValue","map","d","text","isObject","scopedVars","newIdentifier","regStr","regex","source","escape","identifier"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from \"lodash\";\n\nexport class GenericDatasource {\n\n    constructor(instanceSettings, $q, backendSrv, templateSrv) {\n        this.datasourceId = instanceSettings.id;\n        this.type = instanceSettings.type;\n        this.url = instanceSettings.url;\n        this.name = instanceSettings.name;\n        this.q = $q;\n        this.backendSrv = backendSrv;\n        this.templateVarIdentifier = '~';\n        this.templateVarEscaperChar = \"\\\\\";\n        this.templateSrv = GenericDatasource.modifyTemplateVariableIdentifier(templateSrv, this.templateVarIdentifier);\n        this.templateSrv = GenericDatasource.addTemplateVariableEscapeChar(this.templateSrv, this.templateVarEscaperChar, this.templateVarIdentifier);\n        this.withCredentials = instanceSettings.withCredentials;\n        this.headers = {'Content-Type': 'application/json'};\n        if (typeof instanceSettings.basicAuth === 'string' && instanceSettings.basicAuth.length > 0) {\n            this.headers['Authorization'] = instanceSettings.basicAuth;\n        }\n\n        this.parseComplex = instanceSettings.jsonData.parseQueries || false;\n\n        this.queryControls = [];\n\n        //Used for escaping template variables, needed to write regex backwards to take advantage of lookbehinds\n        String.prototype.reverse = function () {\n            return this.split('').reverse().join('');\n        };\n    }\n\n    static modifyTemplateVariableIdentifier(templateSrv, newIdentifier) {\n        let regStr = templateSrv.regex.source;\n\n        //There are 2 occurrences of '\\$'. Remember to escape!\n        regStr = regStr.replace(/\\\\\\$/g, newIdentifier);\n        templateSrv.regex = new RegExp(regStr, 'g');\n        return templateSrv;\n    }\n\n    static addTemplateVariableEscapeChar(templateSrv, escape, identifier) {\n        let regStr = templateSrv.regex.source;\n\n        //We have to write our regex backwards because lookbehinds aren't supported everywhere yet.\n        regStr = regStr.replace(RegExp(identifier + \"\\\\(\\\\\\\\w\\\\+\\\\)\", 'g'), `(\\\\w+)${identifier}(?=[^${\"\\\\\" + escape}]|$)`);\n        templateSrv.regex = new RegExp(regStr, 'g');\n        return templateSrv;\n    }\n\n    removeEscapeChar(filter) {\n        return filter.replace(RegExp(\"\\\\\" + this.templateVarEscaperChar + this.templateVarIdentifier,'g'), this.templateVarIdentifier);\n    }\n\n    findAndReverse(filter) {\n        let newFilter = filter.reverse();\n        return newFilter.replace(RegExp(`(\\\\w+)(?=${this.templateVarIdentifier}(?!\\\\${this.templateVarEscaperChar}))`,'g'), function (a,b){\n            return b.reverse();\n        });\n    }\n\n    reverseAllVariables() {\n        for (let variable in this.templateSrv.index) {\n            // noinspection JSUnfilteredForInLoop\n            if (this.templateSrv.index[variable] instanceof Object\n                && this.templateSrv.index[variable].hasOwnProperty(\"current\")) {\n                // noinspection JSUnfilteredForInLoop\n                this.templateSrv.index[variable].current.value = this.templateSrv.index[variable].current.value.reverse();\n            }\n        }\n    }\n\n    query(options) {\n        options.targets = options.targets.filter(t => !t.hide);\n        if (options.targets.length <= 0) {\n            return this.q.when({data: []});\n        }\n        //Deep copy the object. When template variables are swapped out we don't want to modify the original values\n        let query = JSON.parse(JSON.stringify(options));\n\n        for(let i = 0; i < query.targets.length; i++) {\n            this.reverseAllVariables();\n            let filter = this.findAndReverse(query.targets[i].filter);\n            query.targets[i].filter = this.findAndReverse(this.templateSrv.replace(filter, null, 'regex'));\n            query.targets[i].filter = this.removeEscapeChar(query.targets[i].filter);\n            this.reverseAllVariables();\n\n            //Run through forwards for square bracket variable syntax\n            query.targets[i].filter = this.templateSrv.replace(query.targets[i].filter, null, 'regex');\n\n            //Grafana adds regex escapes to the variables for some reason\n            query.targets[i].filter = query.targets[i].filter.replace(/\\\\(.)/g, \"$1\");\n        }\n\n        query.parseComplex = this.parseComplex;\n\n        query.user = this.backendSrv.contextSrv.user.name;\n        query.userId = this.backendSrv.contextSrv.user.id;\n        query.org = this.backendSrv.contextSrv.user.orgName;\n        query.orgId = this.backendSrv.contextSrv.user.orgId;\n        //Set in query ctrl constructor\n        query.panelName = this.panelName;\n\n        const tsdbRequest = {\n            from: options.range.from.valueOf().toString(),\n            to: options.range.to.valueOf().toString(),\n            queries: [{\n                datasourceId: this.datasourceId,\n                backendUse: query,\n            }]\n        };\n\n        //This is needed because Grafana messes up the ordering when moving the response from backend to frontend\n        let refIdMap = [];\n\n        for(let target of query.targets) {\n            refIdMap.push(target.refId)\n        }\n\n\n        return this.backendSrv.datasourceRequest({\n            url: '/api/tsdb/query',\n            method: 'POST',\n            data: tsdbRequest\n        }).then(handleTsdbResponse).then((res) => {\n            res.data.sort((a, b) => {\n                return refIdMap.indexOf(a.refId) - refIdMap.indexOf(b.refId);\n            });\n            this.response = res;\n            for(let queryControl of this.queryControls) {\n                queryControl.getComplexParts();\n            }\n            return res;\n        } );\n\n        //#region old way\n        //kept in for faster reverts if need be\n        // return this.doRequest({\n        //     url: this.url + '/query',\n        //     data: query,\n        //     method: 'POST'\n        // }).then((res) => {\n        //     //Holds on to the response so that it's accessible by the query controls\n        //     this.response = res;\n        //     for(let queryControl of this.queryControls) {\n        //         queryControl.getComplexParts();\n        //     }\n        //     return res;\n        // } );\n        //#endregion\n    }\n\n    testDatasource() {\n        return this.doRequest({\n            url: this.url + '/',\n            method: 'GET',\n        }).then(response => {\n            if (response.status === 200) {\n                return {status: \"success\", message: \"Data source is working\", title: \"Success\"};\n            }\n        });\n    }\n\n    annotationQuery(options) {\n        var query = this.templateSrv.replace(options.annotation.query, {}, 'glob');\n        var annotationQuery = {\n            range: options.range,\n            annotation: {\n                name: options.annotation.name,\n                datasource: options.annotation.datasource,\n                enable: options.annotation.enable,\n                iconColor: options.annotation.iconColor,\n                query: query\n            },\n            rangeRaw: options.rangeRaw\n        };\n\n        return this.doRequest({\n            url: this.url + '/annotations',\n            method: 'POST',\n            data: annotationQuery\n        }).then(result => {\n            return result.data;\n        });\n    }\n\n    metricFindQuery(query) {\n        var interpolated = {\n            target: this.templateSrv.replace(query, null, 'regex')\n        };\n\n        return this.doRequest({\n            url: this.url + '/search',\n            data: interpolated,\n            method: 'POST',\n        }).then(this.mapToTextValue);\n    }\n\n    mapToTextValue(result) {\n        return _.map(result.data, (d, i) => {\n            if (d && d.text && d.value) {\n                return {text: d.text, value: d.value};\n            } else if (_.isObject(d)) {\n                return {text: d, value: i};\n            }\n            return {text: d, value: d};\n        });\n    }\n\n    doRequest(options) {\n        options.withCredentials = this.withCredentials;\n        options.headers = this.headers;\n\n        this.options = options;\n\n        return this.backendSrv.datasourceRequest(options);\n    }\n\n    buildQueryParameters(options) {\n        //remove placeholder targets\n        options.targets = _.filter(options.targets, target => {\n            return target.target !== 'select metric';\n        });\n\n        var targets = _.map(options.targets, target => {\n            return {\n                target: this.templateSrv.replace(target.target, options.scopedVars, 'regex'),\n                refId: target.refId,\n                hide: target.hide,\n                type: target.type || 'timeserie'\n            };\n        });\n\n        options.targets = targets;\n\n        return options;\n    }\n}\n\nexport function handleTsdbResponse(response) {\n    const res = [];\n    _.forEach(response.data.results, r => {\n        _.forEach(r.series, s => {\n            res.push({target: s.name, datapoints: s.points, queries: r.meta, refId: r.refId});\n        });\n        _.forEach(r.tables, t => {\n            t.type = 'table';\n            t.refId = r.refId;\n            res.push(t);\n        });\n    });\n\n    response.data = res;\n    return response;\n}\n"]}
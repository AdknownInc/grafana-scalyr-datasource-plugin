{"version":3,"sources":["../src/datasource.js"],"names":["_","GenericDatasource","instanceSettings","$q","backendSrv","templateSrv","type","url","name","q","withCredentials","headers","basicAuth","length","queryControls","options","query","targets","filter","t","hide","when","data","doRequest","method","then","res","response","queryControl","getComplexParts","status","message","title","replace","annotation","annotationQuery","range","datasource","enable","iconColor","rangeRaw","result","interpolated","target","mapToTextValue","map","d","i","text","value","isObject","datasourceRequest","scopedVars","refId"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from \"lodash\";\r\n\r\nexport class GenericDatasource {\r\n\r\n    constructor(instanceSettings, $q, backendSrv, templateSrv) {\r\n        this.type = instanceSettings.type;\r\n        this.url = instanceSettings.url;\r\n        this.name = instanceSettings.name;\r\n        this.q = $q;\r\n        this.backendSrv = backendSrv;\r\n        this.templateSrv = templateSrv;\r\n        this.withCredentials = instanceSettings.withCredentials;\r\n        this.headers = {'Content-Type': 'application/json'};\r\n        if (typeof instanceSettings.basicAuth === 'string' && instanceSettings.basicAuth.length > 0) {\r\n            this.headers['Authorization'] = instanceSettings.basicAuth;\r\n        }\r\n\r\n        this.queryControls = [];\r\n    }\r\n\r\n    query(options) {\r\n        // var query = this.buildQueryParameters(options);\r\n        var query = options;\r\n        query.targets = query.targets.filter(t => !t.hide);\r\n\r\n        if (query.targets.length <= 0) {\r\n            return this.q.when({data: []});\r\n        }\r\n\r\n        return this.doRequest({\r\n            url: this.url + '/query',\r\n            data: query,\r\n            method: 'POST'\r\n        }).then((res) => {\r\n            //Holds on to the response so that it's accessible by the query controls\r\n            this.response = res;\r\n            for(let queryControl of this.queryControls) {\r\n                queryControl.getComplexParts();\r\n            }\r\n            return res;\r\n        } );\r\n    }\r\n\r\n    testDatasource() {\r\n        return this.doRequest({\r\n            url: this.url + '/',\r\n            method: 'GET',\r\n        }).then(response => {\r\n            if (response.status === 200) {\r\n                return {status: \"success\", message: \"Data source is working\", title: \"Success\"};\r\n            }\r\n        });\r\n    }\r\n\r\n    annotationQuery(options) {\r\n        var query = this.templateSrv.replace(options.annotation.query, {}, 'glob');\r\n        var annotationQuery = {\r\n            range: options.range,\r\n            annotation: {\r\n                name: options.annotation.name,\r\n                datasource: options.annotation.datasource,\r\n                enable: options.annotation.enable,\r\n                iconColor: options.annotation.iconColor,\r\n                query: query\r\n            },\r\n            rangeRaw: options.rangeRaw\r\n        };\r\n\r\n        return this.doRequest({\r\n            url: this.url + '/annotations',\r\n            method: 'POST',\r\n            data: annotationQuery\r\n        }).then(result => {\r\n            return result.data;\r\n        });\r\n    }\r\n\r\n    metricFindQuery(query) {\r\n        var interpolated = {\r\n            target: this.templateSrv.replace(query, null, 'regex')\r\n        };\r\n\r\n        return this.doRequest({\r\n            url: this.url + '/search',\r\n            data: interpolated,\r\n            method: 'POST',\r\n        }).then(this.mapToTextValue);\r\n    }\r\n\r\n    mapToTextValue(result) {\r\n        return _.map(result.data, (d, i) => {\r\n            if (d && d.text && d.value) {\r\n                return {text: d.text, value: d.value};\r\n            } else if (_.isObject(d)) {\r\n                return {text: d, value: i};\r\n            }\r\n            return {text: d, value: d};\r\n        });\r\n    }\r\n\r\n    doRequest(options) {\r\n        options.withCredentials = this.withCredentials;\r\n        options.headers = this.headers;\r\n\r\n        this.options = options;\r\n\r\n        return this.backendSrv.datasourceRequest(options);\r\n    }\r\n\r\n    buildQueryParameters(options) {\r\n        //remove placeholder targets\r\n        options.targets = _.filter(options.targets, target => {\r\n            return target.target !== 'select metric';\r\n        });\r\n\r\n        var targets = _.map(options.targets, target => {\r\n            return {\r\n                target: this.templateSrv.replace(target.target, options.scopedVars, 'regex'),\r\n                refId: target.refId,\r\n                hide: target.hide,\r\n                type: target.type || 'timeserie'\r\n            };\r\n        });\r\n\r\n        options.targets = targets;\r\n\r\n        return options;\r\n    }\r\n}\r\n"]}
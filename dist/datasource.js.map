{"version":3,"sources":["../src/datasource.js"],"names":["_","GenericDatasource","instanceSettings","$q","backendSrv","templateSrv","type","url","name","q","templateVarIdentifier","templateVarEscaperChar","modifyTemplateVariableIdentifier","addTemplateVariableEscapeChar","console","log","regex","withCredentials","headers","basicAuth","length","parseComplex","jsonData","parseQueries","queryControls","filter","replace","RegExp","options","targets","t","hide","when","data","query","JSON","parse","stringify","i","removeEscapeChar","user","contextSrv","userId","id","org","orgName","orgId","panelName","doRequest","method","then","res","response","queryControl","getComplexParts","status","message","title","annotation","annotationQuery","range","datasource","enable","iconColor","rangeRaw","result","interpolated","target","mapToTextValue","map","d","text","value","isObject","datasourceRequest","scopedVars","refId","newIdentifier","regStr","source","escape","identifier"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from \"lodash\";\r\n\r\nexport class GenericDatasource {\r\n\r\n    constructor(instanceSettings, $q, backendSrv, templateSrv) {\r\n        this.type = instanceSettings.type;\r\n        this.url = instanceSettings.url;\r\n        this.name = instanceSettings.name;\r\n        this.q = $q;\r\n        this.backendSrv = backendSrv;\r\n        this.templateVarIdentifier = '~';\r\n        this.templateVarEscaperChar = \"\\\\\";\r\n        this.templateSrv = GenericDatasource.modifyTemplateVariableIdentifier(templateSrv, this.templateVarIdentifier);\r\n        this.templateSrv = GenericDatasource.addTemplateVariableEscapeChar(templateSrv, this.templateVarEscaperChar, this.templateVarIdentifier);\r\n        console.log(this.templateSrv.regex);\r\n        this.withCredentials = instanceSettings.withCredentials;\r\n        this.headers = {'Content-Type': 'application/json'};\r\n        if (typeof instanceSettings.basicAuth === 'string' && instanceSettings.basicAuth.length > 0) {\r\n            this.headers['Authorization'] = instanceSettings.basicAuth;\r\n        }\r\n\r\n        this.parseComplex = instanceSettings.jsonData.parseQueries;\r\n\r\n        this.queryControls = [];\r\n    }\r\n\r\n    static modifyTemplateVariableIdentifier(templateSrv, newIdentifier) {\r\n        let regStr = templateSrv.regex.source;\r\n\r\n        //There are 2 occurrences of '\\$'. Remember to escape!\r\n        regStr = regStr.replace(/\\\\\\$/g, newIdentifier);\r\n        templateSrv.regex = new RegExp(regStr, 'g');\r\n        return templateSrv;\r\n    }\r\n\r\n    static addTemplateVariableEscapeChar(templateSrv, escape, identifier) {\r\n        let regStr = templateSrv.regex.source;\r\n\r\n        regStr = regStr.replace(RegExp(identifier, 'g'), `(?<=[^${\"\\\\\" + escape}]|^)${identifier}`);\r\n        templateSrv.regex = new RegExp(regStr, 'g');\r\n        return templateSrv;\r\n    }\r\n\r\n    removeEscapeChar(filter) {\r\n        return filter.replace(RegExp(\"\\\\\" + this.templateVarEscaperChar + this.templateVarIdentifier,'g'), this.templateVarIdentifier);\r\n    }\r\n\r\n    query(options) {\r\n        options.targets = options.targets.filter(t => !t.hide);\r\n\r\n        if (options.targets.length <= 0) {\r\n            return this.q.when({data: []});\r\n        }\r\n        //Deep copy the object. When template variables are swapped out we don't want to modify the original values\r\n        let query = JSON.parse(JSON.stringify(options));\r\n\r\n        for(let i = 0; i < query.targets.length; i++) {\r\n            let filter = query.targets[i].filter;\r\n            query.targets[i].filter = this.templateSrv.replace(filter, null, 'regex');\r\n            query.targets[i].filter = this.removeEscapeChar(query.targets[i].filter);\r\n            console.log(query.targets[i].filter);\r\n        }\r\n\r\n        query.parseComplex = this.parseComplex;\r\n\r\n        query.user = this.backendSrv.contextSrv.user.name;\r\n        query.userId = this.backendSrv.contextSrv.user.id;\r\n        query.org = this.backendSrv.contextSrv.user.orgName;\r\n        query.orgId = this.backendSrv.contextSrv.user.orgId;\r\n        //Set in query ctrl constructor\r\n        query.panelName = this.panelName;\r\n\r\n        return this.doRequest({\r\n            url: this.url + '/query',\r\n            data: query,\r\n            method: 'POST'\r\n        }).then((res) => {\r\n            //Holds on to the response so that it's accessible by the query controls\r\n            this.response = res;\r\n            for(let queryControl of this.queryControls) {\r\n                queryControl.getComplexParts();\r\n            }\r\n            return res;\r\n        } );\r\n    }\r\n\r\n    testDatasource() {\r\n        return this.doRequest({\r\n            url: this.url + '/',\r\n            method: 'GET',\r\n        }).then(response => {\r\n            if (response.status === 200) {\r\n                return {status: \"success\", message: \"Data source is working\", title: \"Success\"};\r\n            }\r\n        });\r\n    }\r\n\r\n    annotationQuery(options) {\r\n        var query = this.templateSrv.replace(options.annotation.query, {}, 'glob');\r\n        var annotationQuery = {\r\n            range: options.range,\r\n            annotation: {\r\n                name: options.annotation.name,\r\n                datasource: options.annotation.datasource,\r\n                enable: options.annotation.enable,\r\n                iconColor: options.annotation.iconColor,\r\n                query: query\r\n            },\r\n            rangeRaw: options.rangeRaw\r\n        };\r\n\r\n        return this.doRequest({\r\n            url: this.url + '/annotations',\r\n            method: 'POST',\r\n            data: annotationQuery\r\n        }).then(result => {\r\n            return result.data;\r\n        });\r\n    }\r\n\r\n    metricFindQuery(query) {\r\n        var interpolated = {\r\n            target: this.templateSrv.replace(query, null, 'regex')\r\n        };\r\n\r\n        return this.doRequest({\r\n            url: this.url + '/search',\r\n            data: interpolated,\r\n            method: 'POST',\r\n        }).then(this.mapToTextValue);\r\n    }\r\n\r\n    mapToTextValue(result) {\r\n        return _.map(result.data, (d, i) => {\r\n            if (d && d.text && d.value) {\r\n                return {text: d.text, value: d.value};\r\n            } else if (_.isObject(d)) {\r\n                return {text: d, value: i};\r\n            }\r\n            return {text: d, value: d};\r\n        });\r\n    }\r\n\r\n    doRequest(options) {\r\n        options.withCredentials = this.withCredentials;\r\n        options.headers = this.headers;\r\n\r\n        this.options = options;\r\n\r\n        return this.backendSrv.datasourceRequest(options);\r\n    }\r\n\r\n    buildQueryParameters(options) {\r\n        //remove placeholder targets\r\n        options.targets = _.filter(options.targets, target => {\r\n            return target.target !== 'select metric';\r\n        });\r\n\r\n        var targets = _.map(options.targets, target => {\r\n            return {\r\n                target: this.templateSrv.replace(target.target, options.scopedVars, 'regex'),\r\n                refId: target.refId,\r\n                hide: target.hide,\r\n                type: target.type || 'timeserie'\r\n            };\r\n        });\r\n\r\n        options.targets = targets;\r\n\r\n        return options;\r\n    }\r\n}\r\n"]}
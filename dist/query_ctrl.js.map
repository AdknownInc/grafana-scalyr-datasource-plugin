{"version":3,"sources":["../src/query_ctrl.js"],"names":["QueryCtrl","TIME_INDEX","INTERVAL_TYPE_WINDOW","INTERVAL_TYPE_FIXED","ScalyrDatasourceQueryCtrl","$scope","$injector","$window","$httpParamSerializer","scope","target","filter","secondsInterval","graphFunctions","intervalTypes","supportedIntervalTypes","graphFunction","intervalType","chosenType","queryTypes","type","percentage","placeholder","panel","targets","length","window","serializer","datasource","queryControls","push","panelName","title","showQueryParts","parseComplex","query","metricFindQuery","rawQuery","setTarget","panelCtrl","refresh","response","data","find","element","refId","queryParts","queries","function","replace","timeFrame","getTargetTimeframe","queryParams","severity","Object","assign","qs","url","open","dataList","dataSet","startTime","datapoints","endTime","slice","templateUrl"],"mappings":"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","file":"query_ctrl.js","sourcesContent":["import {QueryCtrl} from 'app/plugins/sdk';\n\nconst TIME_INDEX = 1;\nconst INTERVAL_TYPE_WINDOW = 'window';\nconst INTERVAL_TYPE_FIXED = 'fixed';\n\nexport class ScalyrDatasourceQueryCtrl extends QueryCtrl {\n\n    constructor($scope, $injector, $window, $httpParamSerializer) {\n        super($scope, $injector);\n\n        this.scope = $scope;\n\n\n        this.target.filter = this.target.filter || \"\";\n        this.target.secondsInterval = this.target.secondsInterval || 60;\n        // this.target.interval = this.target.interval || 60;\n        this.graphFunctions = [\n            'mean', 'min', 'max', 'sumPerSecond', 'median', 'p10', 'p50', '95', '99', '999', 'p(n)', 'fraction', '', 'rate', 'count'\n        ];\n        this.intervalTypes = [\n            INTERVAL_TYPE_WINDOW, INTERVAL_TYPE_FIXED\n        ];\n        this.supportedIntervalTypes = [\n            'minute', 'hour', 'day', 'week', 'month'\n        ];\n        this.target.graphFunction = this.target.graphFunction || this.graphFunctions[0];\n        this.target.intervalType = this.target.intervalType || this.intervalTypes[0];\n        this.target.chosenType = this.target.chosenType || this.supportedIntervalTypes[0];\n        this.queryTypes = [\n            'numeric query',\n            'facet query',\n            'complex numeric query'\n        ];\n        this.target.type = this.target.type || this.queryTypes[0];\n        this.target.percentage = this.target.percentage || 25;\n        this.target.placeholder = \"target \" + this.panel.targets.length;\n        this.window = $window;\n        this.serializer = $httpParamSerializer;\n\n        this.datasource.queryControls.push(this);\n\n        this.datasource.panelName = this.panel.title;\n\n        this.target.showQueryParts = this.datasource.parseComplex;\n    }\n\n    getOptions(query) {\n        return this.datasource.metricFindQuery(query || '');\n    }\n\n    toggleEditorMode() {\n        this.target.rawQuery = !this.target.rawQuery;\n    }\n\n    onChangeInternal() {\n        this.setTarget();\n        switch (this.target.type) {\n            case 'numeric query':\n                if (this.target.intervalType === INTERVAL_TYPE_FIXED\n                    || (this.target.intervalType === INTERVAL_TYPE_WINDOW && this.target.secondsInterval > 0))\n                {\n                    this.panelCtrl.refresh(); // Asks the panel to refresh data.\n                }\n                break;\n            case 'facet query':\n                this.panelCtrl.refresh(); // Asks the panel to refresh data.\n                break;\n            case 'complex numeric query':\n                if (this.target.intervalType === INTERVAL_TYPE_FIXED\n                    || (this.target.intervalType === INTERVAL_TYPE_WINDOW && this.target.secondsInterval > 0)) {\n                    this.panelCtrl.refresh(); // Asks the panel to refresh data.\n                }\n                break;\n            default:\n        }\n\n    }\n\n    getComplexParts() {\n        if(this.target.type !== 'complex numeric query' || !this.target.showQueryParts || !this.datasource.parseComplex) {\n            return;\n        }\n\n        if(this.datasource.response.data) {\n            let data = this.datasource.response.data.find((element) => {\n                return element.refId === this.target.refId\n            });\n\n            this.queryParts = [];\n            for (let query of data.queries) {\n                if(typeof query === \"object\") {\n                    this.queryParts.push(query.function + \"(\" + query.filter + \")\");\n                } else {\n                    this.queryParts.push(query);\n                }\n            }\n        }\n    }\n\n    setTarget() {\n        if (this.target.target === '' && this.target.type && this.target.graphFunction) {\n            this.target.placeholder = \"target for \" + (this.target.type + \" \" + this.target.graphFunction).replace(\"/ /g\", \"_\");\n        }\n    }\n\n    /**\n     * Opens the Scalyr logs page in a new window\n     */\n    openScalyrLogs() {\n        if (this.target.filter !== '') {\n            //convert filter to the scalyr logs page\n            /**\n             * Example\n             * https://www.scalyr.com/events?barWidth=30%20minutes&severity=0&filter=$serverHost%3D%27app001%27&startTime=1519121858224&endTime=1519136228224\n             */\n            let filter = this.target.filter;\n            filter = filter.replace(\" = \", \"=\");\n            filter = filter.replace(\" == \", \"==\");\n\n            let timeFrame = this.getTargetTimeframe(this.target.target);\n\n            let queryParams = {\n                severity: 0,\n                filter: filter\n            };\n\n            queryParams = Object.assign(queryParams, timeFrame);\n\n\n            let qs = this.serializer(queryParams);\n            let url = 'https://www.scalyr.com/events?' + qs;\n            this.window.open(url, '_blank');\n        }\n    }\n\n    /**\n     * Gets the first and last time values of the target data points that were returned to grafana.\n     *\n     * The return values should be unix_timestamp values in milliseconds\n     *\n     * @param target string The name of the target that is required\n     * @returns {{startTime: int, endTime: int}}\n     */\n    getTargetTimeframe(target) {\n        for (let dataSet of this.panelCtrl.dataList) {\n            if (dataSet.target === target) {\n                return {\n                    startTime: dataSet.datapoints[0][TIME_INDEX],\n                    endTime: dataSet.datapoints.slice(-1)[0][TIME_INDEX]\n                }\n            }\n        }\n    }\n}\n\nScalyrDatasourceQueryCtrl.templateUrl = 'partials/query.editor.html';\n\n"]}
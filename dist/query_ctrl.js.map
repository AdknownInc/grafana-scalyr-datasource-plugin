{"version":3,"sources":["../src/query_ctrl.js"],"names":["QueryCtrl","TIME_INDEX","GenericDatasourceQueryCtrl","$scope","$injector","$window","$httpParamSerializer","scope","target","filter","secondsInterval","graphFunctions","graphFunction","queryTypes","type","percentage","placeholder","panel","targets","length","window","serializer","query","datasource","metricFindQuery","rawQuery","setTarget","panelCtrl","refresh","replace","timeFrame","getTargetTimeframe","queryParams","severity","Object","assign","qs","url","open","dataList","dataSet","startTime","datapoints","endTime","slice","templateUrl"],"mappings":"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","file":"query_ctrl.js","sourcesContent":["import {QueryCtrl} from 'app/plugins/sdk';\nimport './css/query-editor.css!'\n\nconst TIME_INDEX = 1;\n\nexport class GenericDatasourceQueryCtrl extends QueryCtrl {\n\n\n\n    constructor($scope, $injector, $window, $httpParamSerializer) {\n        super($scope, $injector);\n\n        this.scope = $scope;\n\n\n        this.target.filter = this.target.filter || \"\";\n        this.target.secondsInterval = this.target.secondsInterval || 60;\n        // this.target.interval = this.target.interval || 60;\n        this.graphFunctions = [\n            'mean', 'min', 'max', 'sumPerSecond', 'median', 'p10', 'p50', '95', '99', '999', 'p(n)', 'fraction', '', 'rate', 'count'\n        ];\n        this.target.graphFunction = this.target.graphFunction || this.graphFunctions[0];\n        this.queryTypes = [\n            'numeric query',\n            'facet query',\n            'complex numeric query'\n        ];\n        this.target.type = this.target.type || this.queryTypes[0];\n        this.target.percentage = this.target.percentage || 25;\n        this.target.placeholder = \"target \" + this.panel.targets.length;\n        this.window = $window;\n        this.serializer = $httpParamSerializer\n    }\n\n    getOptions(query) {\n        return this.datasource.metricFindQuery(query || '');\n    }\n\n    toggleEditorMode() {\n        this.target.rawQuery = !this.target.rawQuery;\n    }\n\n    onChangeInternal() {\n        this.setTarget();\n        switch (this.target.type) {\n            case 'numeric query':\n                if (this.target.secondsInterval > 0) {\n                    this.panelCtrl.refresh(); // Asks the panel to refresh data.\n                }\n                break;\n            case 'facet query':\n                this.panelCtrl.refresh(); // Asks the panel to refresh data.\n                break;\n            case 'complex numeric query':\n                if (this.target.secondsInterval > 0) {\n                    this.panelCtrl.refresh(); // Asks the panel to refresh data.\n                }\n                break;\n            default:\n        }\n\n    }\n\n    setTarget() {\n        if (this.target.target === '' && this.target.type && this.target.graphFunction) {\n            this.target.placeholder = \"target for \" + (this.target.type + \" \" + this.target.graphFunction).replace(\"/ /g\", \"_\");\n        }\n    }\n\n    /**\n     * Opens the Scalyr logs page in a new window\n     */\n    openScalyrLogs() {\n        if (this.target.filter !== '') {\n            //convert filter to the scalyr logs page\n            /**\n             * Example\n             * https://www.scalyr.com/events?barWidth=30%20minutes&severity=0&filter=$serverHost%3D%27app001%27&startTime=1519121858224&endTime=1519136228224\n             */\n            let filter = this.target.filter;\n            filter = filter.replace(\" = \", \"=\");\n            filter = filter.replace(\" == \", \"==\");\n\n            let timeFrame = this.getTargetTimeframe(this.target.target);\n\n            let queryParams = {\n                severity: 0,\n                filter: filter\n            };\n\n            queryParams = Object.assign(queryParams, timeFrame);\n\n\n            let qs = this.serializer(queryParams);\n            let url = 'https://www.scalyr.com/events?' + qs;\n            this.window.open(url, '_blank');\n        }\n    }\n\n    /**\n     * Gets the first and last time values of the target data points that were returned to grafana.\n     *\n     * The return values should be unix_timestamp values in milliseconds\n     *\n     * @param target string The name of the target that is required\n     * @returns {{startTime: int, endTime: int}}\n     */\n    getTargetTimeframe(target) {\n        for (let dataSet of this.panelCtrl.dataList) {\n            if (dataSet.target === target) {\n                return {\n                    startTime: dataSet.datapoints[0][TIME_INDEX],\n                    endTime: dataSet.datapoints.slice(-1)[0][TIME_INDEX]\n                }\n            }\n        }\n    }\n}\n\nGenericDatasourceQueryCtrl.templateUrl = 'partials/query.editor.html';\n\n"]}